# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from threading import Thread
from loguru import logger as log
from dotenv import load_dotenv
import sqlite3
import re
import shutil
import os
import subprocess
import asyncio
import time

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log.add('logfiles/logging.log', format='{time} {message}', rotation='1 week', compression='zip')
log.info('Launching the bot. Importing libraries and creating a log file')

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('database.db', check_same_thread = False)
sql = db.cursor()
log.info('Connecting to the database')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∫–Ω–æ–ø–∫–∏
import buttons

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
load_dotenv(dotenv_path)

TOKEN = os.environ.get("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot(path, id_user, id_shop):
    os.system(f'python {path} {id_user} {id_shop}')
    print('–ü–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç')
    log.info('Thread is closed')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class menu(StatesGroup):
    mainmenu = State()
    my_shops = State()
    account = State()

# –ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
class newbot(StatesGroup):
    name_shop = State()
    token = State()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º
class control_panel(StatesGroup):
    wait_event = State()
    post_category = State()
    wait_name_category = State()
    categories_event = State()
    wait_new_name_category = State()
    wait_catogory_for_item = State()
    wait_name_item = State()
    wait_description_item = State()
    wait_price_item = State()
    wait_category_for_see_item = State()
    item_event = State()
    wait_new_name_item = State()
    wait_new_description_item = State()
    wait_new_price_item = State()
    wait_support_message = State()
    wait_coupon_message = State()
    wait_ref = State()
    wait_new_name_for_shop = State()
    wait_name_instance = State()
    wait_type_of_instance = State()
    wait_instance = State()
    wait_event_instance = State()
    wait_new_name_instance = State()
    wait_new_type_instance = State()
    wait_payments = State()
    wait_qiwi_requisites = State()
    wait_card_requisites = State()
    wait_yoomoney_requisites = State()
    wait_text_newsletter = State()

selected_shop = -1
selected_category = -1
selected_item = -1
selected_instance = -1

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'], state='*')
async def process_start_command(msg: types.Message):
    await bot.send_message(msg.from_user.id, f'üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ shopmaker, {msg.from_user.first_name}!', reply_markup=buttons.mainmenu__kb)

    log.info(f'The {msg.from_user.id} entered the /start command')

    sql.execute(f"SELECT id_user FROM users WHERE id_user = '{msg.from_user.id}'")
    if sql.fetchone() is None:
        sql.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)", (msg.from_user.id, 0, 0, 0, 0))
        db.commit()

        log.info(f'A new row has been created in the "users" table')

    await menu.mainmenu.set()

@dp.message_handler(commands=['quit'], state='*')
async def process_start_command(msg: types.Message):
    log.info('The program was stopped by the /quit command')
    quit()

@dp.message_handler(commands=['admin'], state='*')
async def login_admin(msg: types.Message):
    password = msg.get_args()
    if password == 'uPiAmynY21ywk':
        sql.execute(f"UPDATE users SET admin = 1 WHERE id_user = {msg.from_user.id}")
        db.commit()

        log.info(f'{msg.from_user.id} became an admin')
        await bot.send_message(msg.from_user.id, f'–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!')

@dp.message_handler(commands=['newsletter'], state='*')
async def newsletter(msg: types.Message):
    print(msg.text[12:])

"""
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def check_newsletter():
    while True:
        sql.execute(f"SELECT newsletter FROM shops WHERE newsletter = 0")
        all_shops = sql.fetchall()
        if all_shops == []:
            with open('newsletter/newsletter.txt', 'w') as f:
                f.write('')

            sql.execute(f"UPDATE shops SET newsletter = 0")
            db.commit()
        await asyncio.sleep(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
loop = asyncio.get_event_loop()
loop.create_task(check_newsletter())
"""

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(state=menu.mainmenu)
async def echo_message(msg: types.Message):
    if msg.text == 'üõí –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã':
        log.info(f'{msg.from_user.id} went to the list of shops')

        my_shops__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        sql.execute(f"SELECT name_shop FROM shops WHERE id_user = '{msg.from_user.id}'")

        all_shops = sql.fetchall()

        for name in all_shops:
            my_shops__kb.add(KeyboardButton(str(name[0])))

        my_shops__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π')
        my_shops__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        my_shops__kb.add(my_shops__button_1, my_shops__button_2)

        if len(all_shops) != 0:
            await bot.send_message(msg.from_user.id, 'üõí –ù–∏–∂–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=my_shops__kb)
        else:
            await bot.send_message(msg.from_user.id, 'ü§ñ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π', reply_markup=my_shops__kb)
        await menu.my_shops.set()
    elif msg.text == 'üîì –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
        log.info(f'{msg.from_user.id} logged into "my personal account"')

        sql.execute(f"SELECT * FROM users WHERE id_user = '{msg.from_user.id}'")
        string_db = sql.fetchone()

        await bot.send_message(msg.from_user.id, f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name}\nüè™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {string_db[1]}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {string_db[2]}\nüí∏ –ë–∞–ª–∞–Ω—Å: {string_db[3]}', reply_markup=buttons.account__kb)
        await menu.account.set()

# –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã
@dp.message_handler(state=menu.my_shops)
async def command_my_shops(msg: types.Message):
    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        log.info(f'{msg.from_user.id} returned to the main menu from the list of shops')

        await bot.send_message(msg.from_user.id, f'üìå –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', reply_markup=buttons.mainmenu__kb)
        await menu.mainmenu.set()
    elif msg.text == 'ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π':
        log.info(f'{msg.from_user.id} clicked the button to create a new shop')

        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:', reply_markup=ReplyKeyboardRemove())
        await newbot.name_shop.set()
    else:
        sql.execute(f"SELECT name_shop FROM shops WHERE id_user = '{msg.from_user.id}'")

        list_names_shops = []
        for name in sql.fetchall():
            list_names_shops.append(name[0])

        if msg.text in list_names_shops:
            sql.execute(f"SELECT id_shop FROM shops WHERE (id_user = '{msg.from_user.id}' and name_shop = '{msg.text}')")

            global selected_shop
            selected_shop = sql.fetchall()[0][0]

            await bot.send_message(msg.from_user.id, f'‚öô –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º ¬´{msg.text}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=buttons.control_panel__kb)
            log.info(f'{msg.from_user.id} went to the shop "{msg.text}"')

            await control_panel.wait_event.set()
        else:
            pass

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
@dp.message_handler(state=newbot.name_shop)
async def get_name_newbot(msg: types.Message, state: FSMContext):
    log.info(f'{msg.from_user.id} entered the name of the new shop: "{msg.text}"')

    await state.update_data(name_shop=msg.text)
    await bot.send_message(msg.from_user.id, f'üêù –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather, —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π token:')
    await newbot.token.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
@dp.message_handler(state=newbot.token)
async def get_token(msg: types.Message, state: FSMContext):
    sql.execute(f"SELECT token_bot FROM shops WHERE token_bot = '{msg.text}'")
    r = re.search(r'[0-9]*:[a-zA-z0-9]*', msg.text)

    if sql.fetchall() != []:
        await bot.send_message(msg.from_user.id, f'üü° –ú–∞–≥–∞–∑–∏–Ω —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
    elif r == None:
        await bot.send_message(msg.from_user.id, f'üü° –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    elif r != None:
        log.info(f'{msg.from_user.id} introduced a new shop token: "{msg.text}"')

        try:
            sql.execute(f"SELECT * FROM shops WHERE ROWID IN (SELECT max(ROWID) FROM shops)")
            count_str = sql.fetchone()[1] + 1
        except TypeError:
            count_str = 0

        user_data = await state.get_data()

        sql.execute(f"SELECT * FROM shops WHERE id_shop = {count_str}")
        if sql.fetchone() is None:
            sql.execute("INSERT INTO shops VALUES (?, ?, ?, ?, ?, ?, ?, ?)", (int(msg.from_user.id), int(count_str), str(user_data['name_shop']), str(msg.text), str('-'), str('-'), int(0), int(0)))
            db.commit()

            log.info(f'Shop {msg.from_user.id}_{count_str} has been created. A new row has been created in the "shops" table')

        sql.execute(f"SELECT count_shops FROM users WHERE id_user = '{msg.from_user.id}'")
        count_shops = int(sql.fetchone()[0]) + 1

        sql.execute(f"UPDATE users SET count_shops = {count_shops} WHERE id_user = {msg.from_user.id}")
        db.commit()

        log.info(f'The number of shop was changed for user {msg.from_user.id}')

        sql.execute(f"SELECT name_shop FROM shops WHERE id_user = '{msg.from_user.id}'")

        list_shops__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name_shop in sql.fetchall():
            list_shops__kb.add(KeyboardButton(name_shop[0]))

        list_shops__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π')
        list_shops__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_shops__kb.add(list_shops__button_1, list_shops__button_2)

        shutil.copytree('shops/template', f'shops/{msg.from_user.id}_{count_str}')

        log.info(f'The shop {msg.from_user.id}_{count_str} folder was created')

        path = f'shops/{msg.from_user.id}_{count_str}/main.py'
        new_bot = Thread(target=start_bot, args=(path, msg.from_user.id, count_str))
        new_bot.start()

        f = open(f'newsletter/newsletter{count_str}.txt', 'w')
        f.write('\n')
        f.close()

        log.info(f'Store {msg.from_user.id}_{count_str} launched')

        sql.execute(f"SELECT * FROM is_dp WHERE id_shop = {count_str}")
        if sql.fetchone() is None:
            sql.execute("INSERT INTO is_dp VALUES (?, ?, ?)", (int(count_str), 0, 0))
            db.commit()
        else:
            pass

        await bot.send_message(msg.from_user.id, f'üî• –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', reply_markup=list_shops__kb)

        await menu.my_shops.set()

# –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(state=control_panel.wait_event)
async def edit_shop(msg: types.Message):
    global selected_shop

    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        log.info(f'{msg.from_user.id} returned to the list of shops')

        sql.execute(f"SELECT name_shop FROM shops WHERE id_user = '{msg.from_user.id}'")

        list_shops__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name_shop in sql.fetchall():
            list_shops__kb.add(KeyboardButton(name_shop[0]))

        list_shops__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π')
        list_shops__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_shops__kb.add(list_shops__button_1, list_shops__button_2)

        await bot.send_message(msg.from_user.id, f'üõí –ù–∏–∂–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=list_shops__kb)

        await menu.my_shops.set()
    elif msg.text == 'üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
        log.info(f'{msg.from_user.id} entered the list of categories')

        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
        list_categories = sql.fetchall()

        list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_categories:
            list_categories__kb.add(KeyboardButton(name[0]))

        list_categories__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é')
        list_categories__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_categories__kb.add(list_categories__button_1, list_categories__button_2)

        if len(list_categories) != 0:
            await bot.send_message(msg.from_user.id, f'üü° –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å', reply_markup=list_categories__kb)
        else:
            await bot.send_message(msg.from_user.id, f'üìÇ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é', reply_markup=list_categories__kb)
        await control_panel.post_category.set()
    elif msg.text == 'üéà –¢–æ–≤–∞—Ä—ã':
        log.info(f'{msg.from_user.id} entered the list of items')

        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
        list_categories = sql.fetchall()

        list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_categories:
            list_categories__kb.add(KeyboardButton(name[0]))

        list_categories__button_1 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_categories__kb.add(list_categories__button_1)

        if len(list_categories) != 0:
            await bot.send_message(msg.from_user.id, f'üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π —Ç–æ–≤–∞—Ä—ã', reply_markup=list_categories__kb)
        else:
            await bot.send_message(msg.from_user.id, f'‚ùóÔ∏è –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é, –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=list_categories__kb)

        await control_panel.wait_category_for_see_item.set()
    elif msg.text == '‚öô –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await bot.send_message(msg.from_user.id, f'üïπ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –µ–º—É –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å')
        await control_panel.wait_support_message.set()
    elif msg.text == 'üìÉ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É–ø–æ–Ω–∞')
        await control_panel.wait_coupon_message.set()
    elif msg.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ—Ñ–æ–≤–æ–¥ –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ 0 —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)')
        await control_panel.wait_ref.set()
    elif msg.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω':
        shutil.rmtree(f'shops/{msg.from_user.id}_{selected_shop}')

        sql.execute(f"DELETE FROM shops WHERE id_shop = {selected_shop}")
        sql.execute(f"DELETE FROM is_dp WHERE id_shop = {selected_shop}")

        sql.execute(f"SELECT id_category FROM categories WHERE id_shop = {selected_shop}")
        id_categories = []
        for id in sql.fetchall():
            id_categories.append(id[0])

        id_items = []
        for id in id_categories:
            sql.execute(f"SELECT id_item FROM items WHERE id_category = {id}")
            for ids in sql.fetchall():
                id_items.append(ids[0])

        for id in id_categories:
            sql.execute(f"DELETE FROM categories WHERE id_category = {id}")

        for id in id_items:
            sql.execute(f"DELETE FROM instances WHERE id_item = {id}")

        for id in id_items:
            sql.execute(f"DELETE FROM items WHERE id_item = {id}")

        sql.execute(f"SELECT count_shops FROM users WHERE id_user = '{msg.from_user.id}'")
        count_shops = int(sql.fetchone()[0]) - 1

        sql.execute(f"UPDATE users SET count_shops = {count_shops} WHERE id_user = {msg.from_user.id}")

        db.commit()

        sql.execute(f"SELECT name_shop FROM shops WHERE id_user = '{msg.from_user.id}'")

        list_shops__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name_shop in sql.fetchall():
            list_shops__kb.add(KeyboardButton(name_shop[0]))

        list_shops__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π')
        list_shops__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_shops__kb.add(list_shops__button_1, list_shops__button_2)

        sql.execute(f"UPDATE is_dp SET is_del = {1} WHERE id_shop = {selected_shop}")
        db.commit()

        log.info(f'{msg.from_user.id} deleted the shop "{msg.from_user.id}_{selected_shop}"')

        await bot.send_message(msg.from_user.id, f'üóë –ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª–µ–Ω. –ù–∏–∂–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=list_shops__kb)

        await menu.my_shops.set()
    elif msg.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
        await control_panel.wait_new_name_for_shop.set()
    elif msg.text == '‚èØ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å':
        sql.execute(f"SELECT is_pause FROM is_dp WHERE id_shop = {selected_shop}")
        is_pause = sql.fetchone()[0]
        if is_pause == 0:
            sql.execute(f"UPDATE is_dp SET is_pause = {1} WHERE id_shop = {selected_shop}")
            db.commit()

            log.info(f'{msg.from_user.id} stopped the shop "{msg.from_user.id}_{selected_shop}"')

            await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–∞—à –º–∞–≥–∞–∑–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        elif is_pause == 1:
            path = f'shops/{msg.from_user.id}_{selected_shop}/main.py'
            new_bot = Thread(target=start_bot, args=(path, msg.from_user.id, selected_shop))
            new_bot.start()

            sql.execute(f"UPDATE is_dp SET is_pause = {0} WHERE id_shop = {selected_shop}")
            db.commit()

            log.info(f'{msg.from_user.id} launched a shop "{msg.from_user.id}_{selected_shop}"')

            await bot.send_message(msg.from_user.id, f'‚è∏ –í–∞—à –º–∞–≥–∞–∑–∏–Ω –∑–∞–ø—É—â–µ–Ω!')
    elif msg.text == '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞':
        await bot.send_message(msg.from_user.id, f'üì≠ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –≤–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã')
        await control_panel.wait_text_newsletter.set()

# –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=control_panel.wait_text_newsletter)
async def wait_text_newsletter(msg: types.Message):
    global selected_shop

    with open(f'newsletter/newsletter{selected_shop}.txt', 'w') as f:
        f.write(msg.text)

    log.info(f'{msg.from_user.id} started a newsletter with the text: {msg.text}')

    await bot.send_message(msg.from_user.id, f'üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
    await control_panel.wait_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(state=control_panel.wait_new_name_for_shop)
async def wait_new_name_for_shop(msg: types.Message):
    global selected_shop

    sql.execute(f"UPDATE shops SET name_shop = '{msg.text}' WHERE id_shop = {selected_shop}")
    db.commit()

    log.info(f'{msg.from_user.id} changed the name of the store "{msg.from_user.id}_{selected_shop}" to "{msg.text}"')

    await bot.send_message(msg.from_user.id, f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!')
    await control_panel.wait_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(state=control_panel.wait_support_message)
async def wait_support_message(msg: types.Message):
    global selected_shop

    sql.execute(f"UPDATE shops SET support = '{msg.text}' WHERE id_shop = {selected_shop}")
    db.commit()

    log.info(f'{msg.from_user.id} changed the support message')

    await bot.send_message(msg.from_user.id, f'üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    await control_panel.wait_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É–ø–æ–Ω–∞
@dp.message_handler(state=control_panel.wait_coupon_message)
async def wait_coupon_message(msg: types.Message):
    global selected_shop

    sql.execute(f"UPDATE shops SET actual_coupon = '{msg.text}' WHERE id_shop = {selected_shop}")
    db.commit()

    log.info(f'{msg.from_user.id} changed the actual coupon message')

    await bot.send_message(msg.from_user.id, f'üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    await control_panel.wait_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(state=control_panel.wait_ref)
async def wait_ref(msg: types.Message):
    global selected_shop

    if msg.text == '0':
        sql.execute(f"UPDATE shops SET ref_system = '{msg.text}' WHERE id_shop = {selected_shop}")
        db.commit()

        log.info(f'{msg.from_user.id} disabled the referral system')

        await bot.send_message(msg.from_user.id, f'üö´ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!')
        await control_panel.wait_event.set()
    else:
        try:
            if int(msg.text) > 100 or int(msg.text) < 0:
                await bot.send_message(msg.from_user.id, f'‚ùóÔ∏è –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏ –±–æ–ª—å—à–µ 100! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            else:
                sql.execute(f"UPDATE shops SET ref_system = '{msg.text}' WHERE id_shop = {selected_shop}")
                db.commit()

                log.info(f'{msg.from_user.id} changed the percentage of the referral system by {msg.text}%')

                await bot.send_message(msg.from_user.id, f'–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω!')
                await control_panel.wait_event.set()
        except ValueError:
            await bot.send_message(msg.from_user.id, f'üü° –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –∞ –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

# –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
@dp.message_handler(state=control_panel.wait_category_for_see_item)
async def wait_category_for_see_item(msg: types.Message):
    global selected_shop

    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT name_shop FROM shops WHERE id_shop = {selected_shop}")

        log.info(f'{msg.from_user.id} returned to the store\'s control panel')

        await bot.send_message(msg.from_user.id, f'‚öô –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º ¬´{sql.fetchone()[0]}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=buttons.control_panel__kb)
        await control_panel.wait_event.set()
    else:
        global selected_category
        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")

        list_categories_shops = []
        for name in sql.fetchall():
            list_categories_shops.append(name[0])

        if msg.text in list_categories_shops:
            sql.execute(f"SELECT id_category FROM categories WHERE (name_category = '{msg.text}' and id_shop = '{selected_shop}')")
            selected_category = sql.fetchone()[0]

            sql.execute(f"SELECT name_item FROM items WHERE id_category = {selected_category}")
            list_item = sql.fetchall()

            list_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

            for name in list_item:
                list_item__kb.add(KeyboardButton(name[0]))

            list_item__button_1 = KeyboardButton('ü§ñ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π')
            list_item__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

            list_item__kb.add(list_item__button_1, list_item__button_2)

            if len(list_item) != 0:
                log.info(f'{msg.from_user.id} entered the list of products of the category')

                await bot.send_message(msg.from_user.id, f'‚¨áÔ∏è –í–Ω–∏–∑—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å', reply_markup=list_item__kb)
            else:
                await bot.send_message(msg.from_user.id, f'‚ùóÔ∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!', reply_markup=list_item__kb)

            await control_panel.wait_catogory_for_item.set()

# –ö–æ–≥–¥–∞ –∂–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
@dp.message_handler(state=control_panel.wait_catogory_for_item)
async def wait_catogory_for_item(msg: types.Message):
    global selected_shop
    global selected_category
    global selected_item

    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
        list_categories = sql.fetchall()

        list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_categories:
            list_categories__kb.add(KeyboardButton(name[0]))

        list_categories__button_1 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_categories__kb.add(list_categories__button_1)

        log.info(f'{msg.from_user.id} returned to the list of categories in which you need to create a product')

        if len(list_categories) != 0:
            await bot.send_message(msg.from_user.id, f'üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π —Ç–æ–≤–∞—Ä—ã', reply_markup=list_categories__kb)
        else:
            await bot.send_message(msg.from_user.id, f'‚ùóÔ∏è –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é, –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=list_categories__kb)

        await control_panel.wait_category_for_see_item.set()
    elif msg.text == 'ü§ñ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π':
        log.info(f'{msg.from_user.id} clicked on the button to create a new product')

        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_name_item.set()
    else:
        log.info(f'{msg.from_user.id} went to the product control panel')

        sql.execute(f"SELECT id_item FROM items WHERE (id_category = {selected_category} and name_item = '{msg.text}')")
        selected_item = sql.fetchone()[0]

        sql.execute(f"SELECT name_item FROM items WHERE id_item = {selected_item}")
        name_item = sql.fetchone()[0]

        sql.execute(f"SELECT description_item FROM items WHERE id_item = {selected_item}")
        description_item = sql.fetchone()[0]

        sql.execute(f"SELECT price_item FROM items WHERE id_item = {selected_item}")
        price_item = sql.fetchone()[0]

        cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
        cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
        cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
        cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
        cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
        cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
        cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

        await bot.send_message(msg.from_user.id, f'üí¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name_item}\n\n‚≠ïÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {description_item}\n\nüí≤ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_item}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ç–æ–≤–∞—Ä–æ–º', reply_markup=cp_item__kb)
        await control_panel.item_event.set()

# –û–∂–∏–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ç–æ–≤–∞—Ä–æ–º
@dp.message_handler(state=control_panel.item_event)
async def item_event(msg: types.Message):
    global selected_item
    global selected_instance

    if msg.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_new_name_item.set()
    elif msg.text == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_new_description_item.set()
    elif msg.text == 'üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_new_price_item.set()
    elif msg.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
        sql.execute(f"DELETE FROM instances WHERE id_item = {selected_item}")
        sql.execute(f"DELETE FROM items WHERE id_item = {selected_item}")
        db.commit()

        log.info(f'{msg.from_user.id} deleted the product {selected_item}')

        sql.execute(f"SELECT name_item FROM items WHERE id_category = {selected_category}")
        list_item = sql.fetchall()

        list_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_item:
            list_item__kb.add(KeyboardButton(name[0]))

        list_item__button_1 = KeyboardButton('ü§ñ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π')
        list_item__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_item__kb.add(list_item__button_1, list_item__button_2)

        if len(list_item) != 0:
            await bot.send_message(msg.from_user.id, f'üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. –í–Ω–∏–∑—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å', reply_markup=list_item__kb)
        else:
            await bot.send_message(msg.from_user.id, f'üóë  –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!', reply_markup=list_item__kb)

        await control_panel.wait_catogory_for_item.set()
    elif msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        log.info(f'{msg.from_user.id} returned to the list of products of the category')

        sql.execute(f"SELECT name_item FROM items WHERE id_category = {selected_category}")
        list_item = sql.fetchall()

        list_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_item:
            list_item__kb.add(KeyboardButton(name[0]))

        list_item__button_1 = KeyboardButton('ü§ñ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π')
        list_item__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_item__kb.add(list_item__button_1, list_item__button_2)

        if len(list_item) != 0:
            await bot.send_message(msg.from_user.id, f'‚¨áÔ∏è –í–Ω–∏–∑—É —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å', reply_markup=list_item__kb)
        else:
            await bot.send_message(msg.from_user.id, f'ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π!', reply_markup=list_item__kb)

        await control_panel.wait_catogory_for_item.set()
    elif msg.text == '‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_name_instance.set()
    elif msg.text == 'üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤':
        sql.execute(f"SELECT * FROM instances WHERE id_item = {selected_item}")
        list_instances = sql.fetchall()

        list_instances__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_instances:
            type_instance = ''
            if name[3] == 0:
                type_instance = 'üî¥ '
            elif name[3] == 1:
                type_instance = 'üü¢ '

            list_instances__kb.add(KeyboardButton(f'{type_instance}{name[2]}'))

        list_instances__kb.add(KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥'))

        if len(list_instances) == 0:
            await bot.send_message(msg.from_user.id, f'‚òπÔ∏è –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤!', reply_markup=list_instances__kb)
        elif len(list_instances) != 0:
            await bot.send_message(msg.from_user.id, f'‚¨áÔ∏è –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞', reply_markup=list_instances__kb)
        await control_panel.wait_instance.set()

# –û–∂–∏–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
@dp.message_handler(state=control_panel.wait_instance)
async def wait_instance(msg: types.Message):
    global selected_shop
    global selected_category
    global selected_item
    global selected_instance

    if msg.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT name_item FROM items WHERE id_item = {selected_item}")
        name_item = sql.fetchone()[0]

        sql.execute(f"SELECT description_item FROM items WHERE id_item = {selected_item}")
        description_item = sql.fetchone()[0]

        sql.execute(f"SELECT price_item FROM items WHERE id_item = {selected_item}")
        price_item = sql.fetchone()[0]

        cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
        cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
        cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
        cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
        cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
        cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
        cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

        await bot.send_message(msg.from_user.id, f'üí¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {name_item}\n\n‚≠ïÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {description_item}\n\nüí≤ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price_item}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ç–æ–≤–∞—Ä–æ–º', reply_markup=cp_item__kb)
        await control_panel.item_event.set()
    else:
        try:
            name_instance = (msg.text)[2:]
            sql.execute(f"SELECT id_instance FROM instances WHERE name_instance = '{name_instance}'")
            selected_instance = sql.fetchone()[0]

            edit_instance__kb = ReplyKeyboardMarkup(resize_keyboard=True)

            edit_instance__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
            edit_instance__button_2 = KeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø')
            edit_instance__button_3 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
            edit_instance__button_4 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

            edit_instance__kb.add(edit_instance__button_1, edit_instance__button_2, edit_instance__button_3, edit_instance__button_4)

            await bot.send_message(msg.from_user.id, f'–≠–∫–∑–µ–º–ø–ª—è—Ä: {msg.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º', reply_markup=edit_instance__kb)

            await control_panel.wait_event_instance.set()
        except TypeError:
            pass

# –û–∂–∏–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º
@dp.message_handler(state=control_panel.wait_event_instance)
async def wait_event_instance(msg: types.Message):
    global selected_item
    global selected_instance

    if msg.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_new_name_instance.set()
    elif msg.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø':
        type_of_instance__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        type_of_instance__button_1 = KeyboardButton('üü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä')
        type_of_instance__button_2 = KeyboardButton('üî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä')

        type_of_instance__kb.add(type_of_instance__button_1, type_of_instance__button_2)

        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞', reply_markup=type_of_instance__kb)
        await control_panel.wait_new_type_instance.set()
    elif msg.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä':
        sql.execute(f"DELETE FROM instances WHERE id_instance = {selected_instance}")
        db.commit()

        cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
        cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
        cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
        cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
        cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
        cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
        cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

        await bot.send_message(msg.from_user.id, f'üóë –≠–∫–∑–µ–º–ø–ª—è—Ä —É–¥–∞–ª–µ–Ω!', reply_markup=cp_item__kb)
        await control_panel.item_event.set()
    elif msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT * FROM instances WHERE id_item = {selected_item}")
        list_instances = sql.fetchall()

        list_instances__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_instances:
            type_instance = ''
            if name[3] == 0:
                type_instance = 'üî¥ '
            elif name[3] == 1:
                type_instance = 'üü¢ '

            list_instances__kb.add(KeyboardButton(f'{type_instance}{name[2]}'))

        list_instances__kb.add(KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥'))

        if len(list_instances) == 0:
            await bot.send_message(msg.from_user.id, f'‚òπÔ∏è –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤!', reply_markup=list_instances__kb)
        elif len(list_instances) != 0:
            await bot.send_message(msg.from_user.id, f'‚¨áÔ∏è –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞', reply_markup=list_instances__kb)
        await control_panel.wait_instance.set()

# –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
@dp.message_handler(state=control_panel.wait_new_type_instance)
async def wait_new_type_instance(msg: types.Message):
    global selected_instance

    type_instance = -1

    if msg.text == 'üü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä':
        type_instance = 1
    elif msg.text == 'üî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä':
        type_instance = 0

    sql.execute(f'UPDATE instances SET type_of_instance = {type_instance} WHERE id_instance = {selected_instance}')
    db.commit()

    edit_instance__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    edit_instance__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    edit_instance__button_2 = KeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø')
    edit_instance__button_3 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    edit_instance__button_4 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    edit_instance__kb.add(edit_instance__button_1, edit_instance__button_2, edit_instance__button_3, edit_instance__button_4)

    await bot.send_message(msg.from_user.id, f'‚úÖ –¢–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=edit_instance__kb)
    await control_panel.wait_event_instance.set()

# –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
@dp.message_handler(state=control_panel.wait_new_name_instance)
async def wait_new_name_instance(msg: types.Message):
    global selected_instance

    sql.execute(f"UPDATE instances SET name_instance = '{msg.text}' WHERE id_instance = {selected_instance}")
    db.commit()

    edit_instance__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    edit_instance__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    edit_instance__button_2 = KeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø')
    edit_instance__button_3 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    edit_instance__button_4 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    edit_instance__kb.add(edit_instance__button_1, edit_instance__button_2, edit_instance__button_3, edit_instance__button_4)

    await bot.send_message(msg.from_user.id, f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=edit_instance__kb)
    await control_panel.wait_event_instance.set()

# –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç —ç–∫–∑–∞–º–ø–ª—è—Ä–∞
@dp.message_handler(state=control_panel.wait_name_instance)
async def wait_name_instance(msg: types.Message, state: FSMContext):
    await state.update_data(name_instance=msg.text)

    type_of_instance__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    type_of_instance__button_1 = KeyboardButton('üü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä')
    type_of_instance__button_2 = KeyboardButton('üî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä')

    type_of_instance__kb.add(type_of_instance__button_1, type_of_instance__button_2)

    if '\n' in msg.text:
         await bot.send_message(msg.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:\nüü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞, —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è –∏ –µ–≥–æ —Å–º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –µ—â–µ —Ä–∞–∑\nüî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞, —ç–∫–∑–∞–º–ø–ª—è—Ä —É–¥–∞–ª–∏—Ç—Å—è –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è', reply_markup=type_of_instance__kb)
    else:
        await bot.send_message(msg.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:\nüü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞, —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è –∏ –µ–≥–æ —Å–º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –µ—â–µ —Ä–∞–∑\nüî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä - –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞, —ç–∫–∑–∞–º–ø–ª—è—Ä —É–¥–∞–ª–∏—Ç—Å—è –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è', reply_markup=type_of_instance__kb)
    await control_panel.wait_type_of_instance.set()

# –û–∂–∏–¥–∞–µ–º —Ç–∏–ø —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
@dp.message_handler(state=control_panel.wait_type_of_instance)
async def wait_type_of_instance(msg: types.Message, state: FSMContext):
    global selected_item

    type_instance = -1
    if msg.text == 'üü¢ –ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä':
        type_instance = 1
    if msg.text == 'üî¥ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä':
        type_instance = 0

    name_instance = await state.get_data()

    list_instance = name_instance['name_instance'].splitlines()

    for name in list_instance:
        try:
            sql.execute(f"SELECT * FROM instances WHERE ROWID IN (SELECT max(ROWID) FROM instances)")
            count_str = sql.fetchone()[1] + 1
        except TypeError:
            count_str = 0

        sql.execute("INSERT INTO instances VALUES (?, ?, ?, ?)", (selected_item, count_str, name, type_instance))
        db.commit()

    cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
    cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
    cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
    cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

    await bot.send_message(msg.from_user.id, f'‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=cp_item__kb)
    await control_panel.item_event.set()

# –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=control_panel.wait_new_name_item)
async def wait_new_name_item(msg: types.Message):
    global selected_item

    sql.execute(f"UPDATE items SET name_item = '{msg.text}' WHERE id_item = {selected_item}")
    db.commit()

    cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
    cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
    cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
    cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

    await bot.send_message(msg.from_user.id, f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=cp_item__kb)
    await control_panel.item_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=control_panel.wait_new_description_item)
async def wait_new_description_item(msg: types.Message):
    global selected_item

    sql.execute(f"UPDATE items SET description_item = '{msg.text}' WHERE id_item = {selected_item}")
    db.commit()

    cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
    cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
    cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
    cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

    await bot.send_message(msg.from_user.id, f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=cp_item__kb)
    await control_panel.item_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=control_panel.wait_new_price_item)
async def wait_new_price_item(msg: types.Message):
    global selected_item

    sql.execute(f"UPDATE items SET price_item = {abs(int(msg.text))} WHERE id_item = {selected_item}")
    db.commit()

    cp_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    cp_item__button_1 = KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    cp_item__button_2 = KeyboardButton('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
    cp_item__button_3 = KeyboardButton('üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É')
    cp_item__button_4 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
    cp_item__button_5 = KeyboardButton('‚ÄºÔ∏è –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä')
    cp_item__button_6 = KeyboardButton('üëÄ –°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤')
    cp_item__button_7 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    cp_item__kb.add(cp_item__button_1, cp_item__button_2, cp_item__button_3, cp_item__button_4, cp_item__button_5, cp_item__button_6, cp_item__button_7)

    await bot.send_message(msg.from_user.id, f'‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=cp_item__kb)
    await control_panel.item_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=control_panel.wait_name_item)
async def wait_name_item(msg: types.Message, state: FSMContext):
    await state.update_data(name_item=msg.text)
    await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
    await control_panel.wait_description_item.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=control_panel.wait_description_item)
async def wait_description_item(msg: types.Message, state: FSMContext):
    await state.update_data(description=msg.text)
    await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞', reply_markup=ReplyKeyboardRemove())
    await control_panel.wait_price_item.set()

# –û–∂–∏–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä
@dp.message_handler(state=control_panel.wait_price_item)
async def wait_price_item(msg: types.Message, state: FSMContext):
    global selected_category

    try:
        price = abs(int((msg.text).lstrip('0'))) # –£–¥–∞–ª—è–µ–º –Ω—É–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —á–∏—Å–ª–∞

        user_data = await state.get_data()

        try:
            sql.execute(f"SELECT * FROM items WHERE ROWID IN (SELECT max(ROWID) FROM items)")
            count_str = sql.fetchone()[1] + 1
        except TypeError:
            count_str = 0

        sql.execute(f"INSERT INTO items VALUES (?, ?, ?, ?, ?)", (int(selected_category), int(count_str), str(user_data['name_item']), str(user_data['description']), int(price)))
        db.commit()

        sql.execute(f"SELECT name_item FROM items WHERE id_category = {selected_category}")
        list_item = sql.fetchall()

        list_item__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_item:
            list_item__kb.add(KeyboardButton(name[0]))

        list_item__button_1 = KeyboardButton('ü§ñ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π')
        list_item__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_item__kb.add(list_item__button_1, list_item__button_2)

        await bot.send_message(msg.from_user.id, f'‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=list_item__kb)
        await control_panel.wait_catogory_for_item.set()
    except ValueError:
        await bot.send_message(msg.from_user.id, f'üü° –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –∞ —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

# –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=control_panel.post_category)
async def category(msg: types.Message):
    global selected_shop

    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT name_shop FROM shops WHERE id_shop = {selected_shop}")

        await bot.send_message(msg.from_user.id, f'‚öô –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º ¬´{sql.fetchone()[0]}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=buttons.control_panel__kb)
        await control_panel.wait_event.set()
    elif msg.text == 'ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_name_category.set()
    else:
        global selected_category
        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")

        list_categories_shops = []
        for name in sql.fetchall():
            list_categories_shops.append(name[0])

        if msg.text in list_categories_shops:
            cp_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

            cp_categories__button_1 = KeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
            cp_categories__button_2 = KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
            cp_categories__button_3 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

            cp_categories__kb.add(cp_categories__button_1, cp_categories__button_2, cp_categories__button_3)

            await bot.send_message(msg.from_user.id, f'üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ¬´{msg.text}¬ª', reply_markup=cp_categories__kb)

            sql.execute(f"SELECT id_category FROM categories WHERE (id_shop = {selected_shop} and name_category = '{msg.text}')")
            selected_category = sql.fetchone()[0]

            await control_panel.categories_event.set()

# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=control_panel.wait_name_category)
async def name_of_category(msg: types.Message):
    global selected_shop

    try:
        sql.execute(f"SELECT * FROM categories WHERE ROWID IN (SELECT max(ROWID) FROM categories)")
        count_str = sql.fetchone()[1] + 1
    except TypeError:
        count_str = 0

    sql.execute("INSERT INTO categories VALUES (?, ?, ?)", (int(selected_shop), int(count_str), str(msg.text)))
    db.commit()

    sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
    list_categories = sql.fetchall()

    list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    for name in list_categories:
        list_categories__kb.add(KeyboardButton(name[0]))

    list_categories__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é')
    list_categories__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    list_categories__kb.add(list_categories__button_1, list_categories__button_2)

    await bot.send_message(msg.from_user.id, f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{msg.text}¬ª —Å–æ–∑–¥–∞–Ω–∞!', reply_markup=list_categories__kb)

    await control_panel.post_category.set()

# –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
@dp.message_handler(state=control_panel.categories_event)
async def event_of_category(msg: types.Message):
    global selected_shop
    global selected_category

    if msg.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ':
        await bot.send_message(msg.from_user.id, f'‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_new_name_category.set()
    elif msg.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        sql.execute(f"DELETE FROM categories WHERE id_category = {selected_category}")

        sql.execute(f"SELECT id_item FROM items WHERE id_category = {selected_category}")
        for id in sql.fetchall():
            sql.execute(f"DELETE FROM instances WHERE id_item = {id[0]}")
            sql.execute(f"DELETE FROM items WHERE id_item = {id[0]}")

        db.commit()

        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
        list_categories = sql.fetchall()

        list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_categories:
            list_categories__kb.add(KeyboardButton(name[0]))

        list_categories__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é')
        list_categories__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_categories__kb.add(list_categories__button_1, list_categories__button_2)

        await bot.send_message(msg.from_user.id, f'üóë –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!', reply_markup=list_categories__kb)

        await control_panel.post_category.set()
    elif msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
        list_categories = sql.fetchall()

        list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

        for name in list_categories:
            list_categories__kb.add(KeyboardButton(name[0]))

        list_categories__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é')
        list_categories__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

        list_categories__kb.add(list_categories__button_1, list_categories__button_2)

        if len(list_categories) != 0:
            await bot.send_message(msg.from_user.id, f'üü° –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å', reply_markup=list_categories__kb)
        else:
            await bot.send_message(msg.from_user.id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é', reply_markup=list_categories__kb)
        await control_panel.post_category.set()

# –ñ–¥–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=control_panel.wait_new_name_category)
async def new_name_category(msg: types.Message):
    global selected_shop
    global selected_category

    sql.execute(f"UPDATE categories SET name_category = '{msg.text}' WHERE id_category = '{selected_category}'")
    db.commit()

    sql.execute(f"SELECT name_category FROM categories WHERE id_shop = '{selected_shop}'")
    list_categories = sql.fetchall()

    list_categories__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    for name in list_categories:
        list_categories__kb.add(KeyboardButton(name[0]))

    list_categories__button_1 = KeyboardButton('ü§ñ–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é')
    list_categories__button_2 = KeyboardButton('‚óÄ –ù–∞–∑–∞–¥')

    list_categories__kb.add(list_categories__button_1, list_categories__button_2)

    await bot.send_message(msg.from_user.id, f'‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=list_categories__kb)

    await control_panel.post_category.set()

# –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message_handler(state=menu.account)
async def command_account(msg: types.Message):
    if msg.text == '‚óÄ –ù–∞–∑–∞–¥':
        await bot.send_message(msg.from_user.id, f'üìå –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', reply_markup=buttons.mainmenu__kb)
        await menu.mainmenu.set()
    elif msg.text == 'üí∞ –í—ã–≤–µ—Å—Ç–∏':
        sql.execute(f"SELECT balance FROM users WHERE id_user = {msg.from_user.id}")
        balance = sql.fetchone()[0]
        if balance == 0:
            await bot.send_message(msg.from_user.id, f'üôÖ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞!')
        elif balance != 0:
            sql.execute(f"SELECT status FROM withdrawal WHERE id_user = {msg.from_user.id}")
            status = sql.fetchall()

            if status == [] or status[-1][0] == 1:
                payments__kb = ReplyKeyboardMarkup(resize_keyboard=True)

                payments__button_1 = KeyboardButton('ü•ù QIWI –ö–æ—à–µ–ª–µ–∫')
                payments__button_2 = KeyboardButton('üí≥ –ö–∞—Ä—Ç–∞')
                payments__button_3 = KeyboardButton('üëÅ‚Äçüó® –ÆMoney')

                payments__kb.add(payments__button_1, payments__button_2, payments__button_3)

                await bot.send_message(msg.from_user.id, f'‚ÅâÔ∏è –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞?', reply_markup=payments__kb)
                await control_panel.wait_payments.set()
            elif status[-1][0] == 0:
                await bot.send_message(msg.from_user.id, f'ü§† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É')

# –ö–æ–≥–¥–∞ –∂–¥–µ–º —Å–∏—Å—Ç–µ–º—ã, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (–∫–∏–≤–∏, –∫–∞—Ä—Ç–∞, —é–º–∞–Ω–∏)
@dp.message_handler(state=control_panel.wait_payments)
async def wait_payments(msg: types.Message):
    if msg.text == 'ü•ù QIWI –ö–æ—à–µ–ª–µ–∫':
        await bot.send_message(msg.from_user.id, f'üìÑ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ QIWI –ö–æ—à–µ–ª—å–∫–∞', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_qiwi_requisites.set()
    elif msg.text == 'üí≥ –ö–∞—Ä—Ç–∞':
        await bot.send_message(msg.from_user.id, f'üìÑ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_card_requisites.set()
    elif msg.text == 'üëÅ‚Äçüó® –ÆMoney':
        await bot.send_message(msg.from_user.id, f'üìÑ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–∞—à–µ–≥–æ –ÆMoney', reply_markup=ReplyKeyboardRemove())
        await control_panel.wait_yoomoney_requisites.set()

# –¢—É—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã qiwi –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
@dp.message_handler(state=control_panel.wait_qiwi_requisites)
async def wait_qiwi_requisites(msg: types.Message):
    sql.execute(f"SELECT id_user FROM users WHERE admin = 1")
    admin = sql.fetchone()[0]

    sql.execute(f"SELECT balance FROM users WHERE id_user = {msg.from_user.id}")
    balance = sql.fetchone()[0]

    try:
        sql.execute(f"SELECT * FROM withdrawal WHERE ROWID IN (SELECT max(ROWID) FROM withdrawal)")
        count_str = sql.fetchone()[1] + 1
    except TypeError:
        count_str = 0

    sql.execute(f"INSERT INTO withdrawal VALUES (?, ?, ?, ?, ?, ?)", (int(msg.from_user.id), int(count_str), 'qiwi', int(balance), msg.text, 0))
    db.commit()

    back__kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('‚óÄ –ù–∞–∑–∞–¥'))
    await bot.send_message(msg.from_user.id, f'üîÆ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, —Å–æ —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ —Å–ø–∏—à—É—Ç—Å—è –¥–µ–Ω—å–≥–∏', reply_markup=back__kb)

    paid__cb = CallbackData('paid', 'id_p')
    paid__button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª!', callback_data=paid__cb.new(id_p=count_str))]])
    await bot.send_message(admin, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name} ({msg.from_user.id})\nü•ù –°–∏—Å—Ç–µ–º–∞: QIWI –ö–æ—à–µ–ª–µ–∫\nüí≤ –°—É–º–º–∞: {balance} —Ä—É–±.\nüìÉ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ```{msg.text}```', reply_markup=paid__button, parse_mode='Markdown')

    await menu.account.set()

# –¢—É—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã card –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
@dp.message_handler(state=control_panel.wait_card_requisites)
async def wait_qiwi_requisites(msg: types.Message):
    sql.execute(f"SELECT id_user FROM users WHERE admin = 1")
    admin = sql.fetchone()[0]

    sql.execute(f"SELECT balance FROM users WHERE id_user = {msg.from_user.id}")
    balance = sql.fetchone()[0]

    try:
        sql.execute(f"SELECT * FROM withdrawal WHERE ROWID IN (SELECT max(ROWID) FROM withdrawal)")
        count_str = sql.fetchone()[1] + 1
    except TypeError:
        count_str = 0

    sql.execute(f"INSERT INTO withdrawal VALUES (?, ?, ?, ?, ?, ?)", (int(msg.from_user.id), int(count_str), 'card', int(balance), msg.text, 0))
    db.commit()

    back__kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('‚óÄ –ù–∞–∑–∞–¥'))
    await bot.send_message(msg.from_user.id, f'üîÆ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, —Å–æ —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ —Å–ø–∏—à—É—Ç—Å—è –¥–µ–Ω—å–≥–∏', reply_markup=back__kb)

    paid__cb = CallbackData('paid', 'id_p')
    paid__button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª!', callback_data=paid__cb.new(id_p=count_str))]])
    await bot.send_message(admin, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name} ({msg.from_user.id})\nüí≥ –°–∏—Å—Ç–µ–º–∞: –ö–∞—Ä—Ç–∞\nüí≤ –°—É–º–º–∞: {balance} —Ä—É–±.\nüìÉ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ```{msg.text}```', reply_markup=paid__button, parse_mode='Markdown')

    await menu.account.set()

# –¢—É—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã yoomoney –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
@dp.message_handler(state=control_panel.wait_yoomoney_requisites)
async def wait_qiwi_requisites(msg: types.Message):
    sql.execute(f"SELECT id_user FROM users WHERE admin = 1")
    admin = sql.fetchone()[0]

    sql.execute(f"SELECT balance FROM users WHERE id_user = {msg.from_user.id}")
    balance = sql.fetchone()[0]

    try:
        sql.execute(f"SELECT * FROM withdrawal WHERE ROWID IN (SELECT max(ROWID) FROM withdrawal)")
        count_str = sql.fetchone()[1] + 1
    except TypeError:
        count_str = 0

    sql.execute(f"INSERT INTO withdrawal VALUES (?, ?, ?, ?, ?, ?)", (int(msg.from_user.id), int(count_str), 'yoomoney', int(balance), msg.text, 0))
    db.commit()

    back__kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('‚óÄ –ù–∞–∑–∞–¥'))
    await bot.send_message(msg.from_user.id, f'üîÆ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, —Å–æ —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ —Å–ø–∏—à—É—Ç—Å—è –¥–µ–Ω—å–≥–∏', reply_markup=back__kb)

    paid__cb = CallbackData('paid', 'id_p')
    paid__button = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª!', callback_data=paid__cb.new(id_p=count_str))]])
    await bot.send_message(admin, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name} ({msg.from_user.id})\nüëÅ‚Äçüó® –°–∏—Å—Ç–µ–º–∞: –ÆMoney\nüí≤ –°—É–º–º–∞: {balance} —Ä—É–±.\nüìÉ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ```{msg.text}```', reply_markup=paid__button, parse_mode='Markdown')

    await menu.account.set()

@dp.callback_query_handler(lambda callback_query: True, state='*')
async def inline_button(call: types.CallbackQuery):
    await call.answer(cache_time=2)
    r = re.findall(r'([a-z_]*):([0-9]*)', call.data)

    sql.execute(f"SELECT id_user FROM withdrawal WHERE id_paid = {r[0][1]}")
    id_user = sql.fetchone()[0]

    sql.execute(f"SELECT amount FROM withdrawal WHERE id_paid = {r[0][1]}")
    amount = sql.fetchone()[0]

    sql.execute(f"SELECT balance FROM users WHERE id_user = {id_user}")
    balance = sql.fetchone()[0] - amount

    sql.execute(f"UPDATE users SET balance = {balance} WHERE id_user = {id_user}")
    db.commit()

    sql.execute(f"UPDATE withdrawal SET status = 1 WHERE id_paid = {r[0][1]}")
    db.commit()

    await call.message.edit_text(f'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ!')

async def on_startup(_):
    sql.execute(f"SELECT id_user FROM users")
    all_users = sql.fetchall()

    for user in all_users:
        sql.execute(f"SELECT * FROM shops WHERE id_user = {user[0]}")
        count_shops = sql.fetchall()

        if len(count_shops) == 0:
            await bot.send_message(user[0], f'üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞', reply_markup=ReplyKeyboardRemove())
        elif len(count_shops) == 1:
            await bot.send_message(user[0], f'üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.\n\n–¢–∞–∫–∂–µ, –≤–∞—à –º–∞–≥–∞–∑–∏–Ω ¬´{count_shops[0][2]}¬ª –±—ã–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º', reply_markup=ReplyKeyboardRemove())
        elif len(count_shops) > 1:
            await bot.send_message(user[0], f'üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞.\n\n–¢–∞–∫–∂–µ, –≤–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã –±—ã–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –∏—Ö –∑–∞–ø—É—Å—Ç–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º', reply_markup=ReplyKeyboardRemove())

        await asyncio.sleep(1)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
