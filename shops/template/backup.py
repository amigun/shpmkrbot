# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from threading import Thread
import sqlite3, os, sys, time, re, random

# –ü–æ–ª—É—á–∞–µ–º id —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ id —Å–∞–º–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
id_owner = sys.argv[1]
id_shop = sys.argv[2]

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('database.db', check_same_thread = False)
sql = db.cursor()

# –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_l = sqlite3.connect(f'shops/{id_owner}_{id_shop}/database.db', check_same_thread = False)
sql_l = db_l.cursor()

sql.execute(f"SELECT name_shop FROM shops WHERE id_shop = {id_shop}")
name_shop = sql.fetchone()[0]

sql.execute(f"SELECT token_bot FROM shops WHERE id_shop = {id_shop}")
TOKEN = sql.fetchone()[0]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
def listening():
    is_quit = 0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ

    while is_quit != 1: # –ü–æ–∫–∞ is_quit –Ω–µ —Å—Ç–∞–Ω–µ—Ç 1 (–ø–æ–∫–∞ –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤—ã–π—Ç–∏)
        sql.execute(f"SELECT is_del FROM is_dp WHERE id_shop = {id_shop}")
        is_del = sql.fetchone()[0]

        sql.execute(f"SELECT is_pause FROM is_dp WHERE id_shop = {id_shop}")
        is_pause = sql.fetchone()[0]

        if is_del == 1 or is_pause == 1:
            is_quit = 1

        time.sleep(10)

    os._exit(0) # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞

# –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
thread = Thread(target=listening)
thread.start()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ref_system = 0
support = '-'
coupon = '-'

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'], state='*')
async def process_start_command(msg: types.Message):
    id_ref = 0 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - ref_id —Ä–∞–≤–µ–Ω 0

    sql_l.execute(f"SELECT * FROM users WHERE id_user = {msg.from_user.id}")

    if sql_l.fetchone() is None: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        try:
            id_ref = int((msg.text).split()[1]) # –ï—Å–ª–∏ –æ–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        except IndexError:
            pass

        if id_ref != 0:
            sql_l.execute(f"SELECT count_ref FROM users WHERE id_user = {id_ref}")
            count_ref = int(sql_l.fetchone()[0])
            count_ref += 1

            sql_l.execute(f"UPDATE users SET count_ref = {count_ref} WHERE id_user = {id_ref}")
            db_l.commit()

    main_menu__kb = ReplyKeyboardMarkup(resize_keyboard=True)

    main_menu__button_1 = KeyboardButton('‚≠êÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã')
    main_menu__button_2 = KeyboardButton('üë¶ –ü—Ä–æ—Ñ–∏–ª—å')
    main_menu__button_3 = KeyboardButton('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
    main_menu__button_4 = KeyboardButton('üîß –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
    main_menu__button_5 = KeyboardButton('üéü –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω')

    main_menu__kb.add(main_menu__button_1, main_menu__button_2)

    global ref_system
    global support
    global coupon

    try:
        sql.execute(f"SELECT ref_system FROM shops WHERE id_shop = {id_shop}")
        ref_system = sql.fetchone()[0]

        sql.execute(f"SELECT support FROM shops WHERE id_shop = {id_shop}")
        support = sql.fetchone()[0]

        sql.execute(f"SELECT actual_coupon FROM shops WHERE id_shop = {id_shop}")
        coupon = sql.fetchone()[0]
    except TypeError:
        pass

    if ref_system != 0:
        main_menu__kb.add(main_menu__button_3)

    if support != '-':
        main_menu__kb.add(main_menu__button_4)

    if coupon != '-':
        main_menu__kb.add(main_menu__button_5)

    await bot.send_message(msg.from_user.id, f'üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {name_shop}, {msg.from_user.first_name}!', reply_markup=ReplyKeyboardRemove())
    await bot.send_message(msg.from_user.id, f'–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ¬´‚≠êÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã¬ª, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å–∞–º —Ç–æ–≤–∞—Ä!', reply_markup=main_menu__kb)

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±–¥ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    sql_l.execute(f"SELECT id_user FROM users WHERE id_user = '{msg.from_user.id}'")
    if sql_l.fetchone() is None:
        sql_l.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?)", (msg.from_user.id, 0, 0, 0, 0, int(id_ref)))
        db_l.commit()

@dp.message_handler()
async def all_items(msg: types.Message):
    global id_shop
    global ref_system

    if msg.text == '‚≠êÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã':
        category_callback = CallbackData('category', 'id_c')

        sql.execute(f"SELECT * FROM categories WHERE id_shop = {id_shop}")
        list_category_from_db = sql.fetchall()

        pre_list_category = [[idc[1] for idc in list_category_from_db], [name[2] for name in list_category_from_db]]

        list_category = []

        for i in range(len(pre_list_category[0])):
            list_category.append([InlineKeyboardButton(text=pre_list_category[1][i], callback_data=category_callback.new(id_c=pre_list_category[0][i]))])

        choice_category = InlineKeyboardMarkup(inline_keyboard = [x for x in list_category])

        if list_category == []:
            await bot.send_message(msg.from_user.id, f'ü•∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        else:
            await bot.send_message(msg.from_user.id, f'üî• –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π —Ç–æ–≤–∞—Ä—ã!', reply_markup=choice_category)
    elif msg.text == 'üë¶ –ü—Ä–æ—Ñ–∏–ª—å':
        sql.execute(f"SELECT ref_system FROM shops WHERE id_shop = {id_shop}")
        ref_system = sql.fetchone()[0]

        sql_l.execute(f"SELECT * FROM users WHERE id_user = {msg.from_user.id}")
        user_info = sql_l.fetchall()[0]

        if ref_system != 0:
            await bot.send_message(msg.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name}\n–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {user_info[1]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info[2]}\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: {user_info[3]}\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_info[4]}')
        else:
            await bot.send_message(msg.from_user.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.first_name}\n–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {user_info[1]}')
    elif msg.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞':
        sql.execute(f"SELECT ref_system FROM shops WHERE id_shop = {id_shop}")
        ref_percent = sql.fetchone()[0]

        ref_link = CallbackData('ref_link', 'id_s')

        get_ref_link = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text='üî∂ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', callback_data=ref_link.new(id_s=id_shop))]])

        await bot.send_message(msg.from_user.id, f'üî∫ –í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞! –ü—Ä–∏–≤–ª–µ–∫–∞–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–ª—É—á–∞–π {ref_percent}% —Å –∫–∞–∂–¥–æ–π –∏—Ö –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏', reply_markup=get_ref_link)
    elif msg.text == 'üîß –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        sql.execute(f"SELECT support FROM shops WHERE id_shop = {id_shop}")

        await bot.send_message(msg.from_user.id, sql.fetchone()[0])
    elif msg.text == 'üéü  –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É–ø–æ–Ω':
        sql.execute(f"SELECT actual_coupon FROM shops WHERE id_shop = {id_shop}")

        await bot.send_message(msg.from_user.id, sql.fetchone()[0])

@dp.callback_query_handler(lambda callback_query: True)
async def inline_button(call: types.CallbackQuery):
    global id_shop
    await call.answer(cache_time=2)
    r = re.findall(r'([a-z_]*):([0-9]*)', call.data)

    bot_name = await bot.get_me()

    if r[0][0] == 'category':
        id_category = int(r[0][1])

        item_callback = CallbackData('item', 'id_c', 'id_i')

        sql.execute(f"SELECT * FROM items WHERE id_category = {id_category}")
        list_items_from_db = sql.fetchall()

        pre_list_items = [[idi[1] for idi in list_items_from_db], [name[2] for name in list_items_from_db]]

        list_items = []

        for i in range(len(pre_list_items[0])):
            list_items.append([InlineKeyboardButton(text=pre_list_items[1][i], callback_data=item_callback.new(id_c=id_category, id_i=pre_list_items[0][i]))])

        cb_data = CallbackData('back_to_categories', 'id_s')

        list_items.append([InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_s=id_shop))])

        choice_item = InlineKeyboardMarkup(inline_keyboard = [x for x in list_items])

        if len(list_items) == 1: # –ï—Å–ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - "–ù–∞–∑–∞–¥"
            await call.message.edit_text(f'ü•∫ –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=choice_item)
        else:
            await call.message.edit_text(f'üí• –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=choice_item)
    elif r[0][0] == 'back_to_categories':
        category_callback = CallbackData('category', 'id_c')

        sql.execute(f"SELECT * FROM categories WHERE id_shop = {id_shop}")
        list_category_from_db = sql.fetchall()

        pre_list_category = [[idc[1] for idc in list_category_from_db], [name[2] for name in list_category_from_db]]

        list_category = []

        for i in range(len(pre_list_category[0])):
            list_category.append([InlineKeyboardButton(text=pre_list_category[1][i], callback_data=category_callback.new(id_c=pre_list_category[0][i]))])

        choice_category = InlineKeyboardMarkup(inline_keyboard = [x for x in list_category])

        if list_category == []:
            await call.message.edit_text(f'ü•∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        else:
            await call.message.edit_text(f'üî• –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –í—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω–µ–π —Ç–æ–≤–∞—Ä—ã!', reply_markup=choice_category)
    elif r[0][0] == 'item': # r[0][0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–ª–±—ç–∫–∞ (item, category, back_to_category –∏ —Ç–¥), r[0][1] - –∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, r[1][1] - –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞
        sql.execute(f"SELECT * FROM items WHERE id_item = {r[1][1]}")
        info_item = sql.fetchall()

        title = info_item[0][2]
        description = info_item[0][3]
        price = info_item[0][4]

        buy_real = CallbackData('buy_real', 'id_i')
        buy_ref = CallbackData('buy_ref', 'id_i')
        cb_data = CallbackData('back_to_items', 'id_c')

        try: # –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –µ—Å—Ç—å
            sql.execute(f"SELECT * FROM instances WHERE id_item = {r[1][1]}")
            all_instances = sql.fetchall()

            random_instance = random.choice(all_instances)

            id_user = call.from_user.id
            print(id_user)

            sql_l.execute(f"SELECT ref_balance FROM users WHERE id_user = {id_user}")
            ref_balance = int(sql_l.fetchone()[0])

            sql.execute(f"SELECT price_item FROM items WHERE id_item = {r[1][1]}")
            price_item = int(sql.fetchone()[0])

            if ref_balance < price_item: # –ï—Å–ª–∏ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                buy_kb = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å', callback_data=buy_real.new(id_i=r[1][1]))], [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_c=r[0][1]))]])
                await call.message.edit_text(f'<b>{title}</b>\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±.', reply_markup=buy_kb, parse_mode=types.ParseMode.HTML)
            elif ref_balance > price_item: # –ï—Å–ª–∏ –Ω–µ —Ä–µ—Ñ. —Å—á–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
                 buy_kb = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏', callback_data=buy_real.new(id_i=r[1][1]))], [InlineKeyboardButton(text='üë• –ö—É–ø–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏', callback_data=buy_ref.new(id_i=r[1][1]))], [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_c=r[0][1]))]])
                 await call.message.edit_text(f'<b>{title}</b>\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±.', reply_markup=buy_kb, parse_mode=types.ParseMode.HTML)
        except IndexError:
            buy_kb = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_c=r[0][1]))]])
            await call.message.edit_text(f'<b>{title}</b>\n\n{description}\n\n‚õîÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', reply_markup=buy_kb, parse_mode=types.ParseMode.HTML)
    elif r[0][0] == 'back_to_items':
        id_category = r[0][1]

        item_callback = CallbackData('item', 'id_c', 'id_i')

        sql.execute(f"SELECT * FROM items WHERE id_category = {id_category}")
        list_items_from_db = sql.fetchall()

        pre_list_items = [[idi[1] for idi in list_items_from_db], [name[2] for name in list_items_from_db]]

        list_items = []

        for i in range(len(pre_list_items[0])):
            list_items.append([InlineKeyboardButton(text=pre_list_items[1][i], callback_data=item_callback.new(id_c=id_category, id_i=pre_list_items[0][i]))])

        cb_data = CallbackData('back_to_categories', 'id_s')

        list_items.append([InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_s=id_shop))])

        choice_item = InlineKeyboardMarkup(inline_keyboard = [x for x in list_items])

        if len(list_items) == 1:
            await call.message.edit_text(f'ü•∫ –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=choice_item)
        else:
            await call.message.edit_text(f'üí• –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=choice_item)
    elif r[0][0] == 'ref_link':
        await call.message.edit_text(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_name.username}?start={call.from_user.id}')
    elif r[0][0] == 'buy':
        sql.execute(f"SELECT id_user FROM shops WHERE id_shop = {id_shop}")
        id_user = sql.fetchone()[0]

        sql_l.execute(f"SELECT ref_balance FROM users WHERE id_user = {id_user}")
        ref_balance = int(sql_l.fetchone()[0])

        sql.execute(f"SELECT price_item FROM items WHERE id_item = {r[0][1]}")
        price_item = int(sql.fetchone()[0])

        if ref_balance < price_item:
            you_buy_this_item = True

            if you_buy_this_item:
                sql.execute(f"SELECT * FROM instances WHERE id_item = {r[0][1]}")
                all_instances = sql.fetchall()

                random_instance = random.choice(all_instances)

                if random_instance[3] == 0:
                    sql.execute(f"DELETE FROM instances WHERE id_instance = {random_instance[1]}")
                    db.commit()

                #sql.execute(f"SELECT id_user FROM shops WHERE id_shop = {id_shop}")
                #id_user = sql.fetchone()[0]
                id_user = call.message.from_user.id

                sql_l.execute(f"SELECT ref_balance FROM users WHERE id_user = {id_user}")
                ref_balance = int(sql_l.fetchone()[0])

                sql.execute(f"SELECT price_item FROM items WHERE id_item = {r[0][1]}")
                price_item = int(sql.fetchone()[0])

                new_ref_balance = ref_balance - price_item

                sql_l.execute(f"UPDATE users SET ref_balance = {new_ref_balance} WHERE id_user = {id_user}")

                sql_l.execute(f"SELECT item_bought FROM users WHERE id_user = {id_user}")
                item_bought = int(sql_l.fetchone()[0])

                item_bought += 1

                sql_l.execute(f"UPDATE users SET item_bought = {item_bought} WHERE id_user = {id_user}")

                sql_l.execute(f"SELECT id_ref FROM users WHERE id_user = {id_user}")
                id_ref = sql_l.fetchone()[0]

                db.commit()

                if id_ref != 0:
                    sql.execute(f"SELECT ref_system FROM shops WHERE id_shop = {id_shop}")
                    ref_system = int(sql.fetchone()[0])

                    ref_deduction = price_item - (price_item / 100 * ref_system)

                    sql_l.execute(f"SELECT * FROM users WHERE id_user = {id_ref}")
                    earned_on_ref = sql.fetchall()

                await call.message.edit_text(f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n{random_instance[2]}')
        elif ref_balance > price_item:
            buy_callback = CallbackData('buy', 'id_i')
            buy_with_real_money_callback = CallbackData('buy_real', 'id_i')
            buy_with_ref_balance_callback = CallbackData('buy_ref', 'id_i')
            cb_data = CallbackData('back_to_items', 'id_c')

            sql.execute(f"SELECT id_category FROM items WHERE id_item = {r[0][1]}")
            id_category = sql.fetchone()[0]

            buy_kb = InlineKeyboardMarkup(inline_keyboard = [[InlineKeyboardButton(text='üí≥ –ö—É–ø–∏—Ç—å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏', callback_data=buy_with_real_money_callback.new(id_i=r[0][1]))], [InlineKeyboardButton(text='üë• –ö—É–ø–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏', callback_data=buy_with_ref_balance_callback.new(id_i=r[0][1]))], [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=cb_data.new(id_c=id_category))]])

            await call.message.edit_text(f'–ù–∞ –≤–∞—à–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏?', reply_markup=buy_kb)
    elif r[0][0] == 'buy_real':
        you_buy_this_item = True

        if you_buy_this_item:
            sql.execute(f"SELECT * FROM instances WHERE id_item = {r[0][1]}")
            all_instances = sql.fetchall()

            random_instance = random.choice(all_instances)

            if random_instance[3] == 0:
                sql.execute(f"DELETE FROM instances WHERE id_instance = {random_instance[1]}")
                db.commit()

            await call.message.edit_text(f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n{random_instance[2]}')
    elif r[0][0] == 'buy_ref':
        sql.execute(f"SELECT * FROM instances WHERE id_item = {r[0][1]}")
        all_instances = sql.fetchall()

        random_instance = random.choice(all_instances)

        if random_instance[3] == 0:
            sql.execute(f"DELETE FROM instances WHERE id_instance = {random_instance[1]}")
            db.commit()

        sql.execute(f"SELECT id_user FROM shops WHERE id_shop = {id_shop}")
        id_user = sql.fetchone()[0]

        sql_l.execute(f"SELECT ref_balance FROM users WHERE id_user = {id_user}")
        ref_balance = int(sql_l.fetchone()[0])

        sql.execute(f"SELECT price_item FROM items WHERE id_item = {r[0][1]}")
        price_item = int(sql.fetchone()[0])

        new_ref_balance = ref_balance - price_item

        sql_l.execute(f"UPDATE users SET ref_balance = {new_ref_balance} WHERE id_user = {id_user}")

        sql_l.execute(f"SELECT item_bought FROM users WHERE id_user = {id_user}")
        item_bought = int(sql_l.fetchone()[0])

        item_bought += 1

        sql_l.execute(f"UPDATE users SET item_bought = {item_bought} WHERE id_user = {id_user}")

        sql_l.execute(f"SELECT id_ref FROM users WHERE id_user = {id_user}")
        id_ref = sql_l.fetchone()[0]

        db.commit()

        print(f'–ü–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞, –ø–µ—Ä–µ–¥ –∏—Ñ–æ–º')

        if id_ref != 0:
            print(f'–í –∏—Ñ–µ')
            sql.execute(f"SELECT ref_system FROM shops WHERE id_shop = {id_shop}")
            ref_system = int(sql.fetchone()[0])

            ref_deduction = price_item - (price_item / 100 * ref_system)

            sql_l.execute(f"SELECT * FROM users WHERE id_user = {id_ref}")
            earned_on_ref = sql.fetchall()
            print(f'earned_on_ref::::::: {earned_on_ref}')
        print(f'–ü–æ—Å–ª–µ –∏—Ñ–∞')

        await call.message.edit_text(f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n{random_instance[2]}')

if __name__ == '__main__':
    executor.start_polling(dp)
